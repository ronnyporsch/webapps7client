rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function checkEventIDasID(eventID) {
      return !(exists(/databases/$(database)/documents/events/$(eventID)));
		}
    
    function checkMaxParticipants(maxP){
    	return (maxP is int && maxP > 0 && maxP != null);
    }
    
    function checkDate(date){
    	return(date != null);
    }
    match /events/{document=**} {
    	allow read: if request.auth != null;
      allow create: if request.auth.token.email_verified == true 
        && checkEventIDasID(request.resource.data.eventID) == true 
        && checkMaxParticipants(request.resource.data.maxParticipants) == true
        && request.resource.data.name != null
        && request.resource.data.description != null
        && request.resource.data.style != null
        && checkDate(request.resource.data.date) == true;
      allow update: if request.auth.token.email_verified == true
                 && (request.resource.data.diff( resource.data).affectedKeys()
                  .hasOnly(['name', 'description', 'style', 'date', 'maxParticipants']))
                 && request.resource.data.maxParticipants != null ?
                   checkMaxParticipants( request.resource.data.maxParticipants) : true
                 && request.resource.data.date != null ?
                   checkDate( request.resource.data.date) : true;
      allow delete: if request.auth.token.email_verified == true;
    }
  }
}